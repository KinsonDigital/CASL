name: ðŸš€Preview Release


defaults:
  run:
    shell: pwsh


env:
  PROJECT_NAME: CASL
  CICD_SCRIPTS_VERSION: v4.5.3


on:
  workflow_dispatch:
  push: # TODO: REMOVE ME 
    branches: feature/215-create-release-workflow


jobs:
  validate_branch:
    name: Validate Branch
    runs-on: ubuntu-latest
    steps:
    - name: Validate Branch
      run: |
        $branch = "${{ github.ref_name  }}"

        # TODO: REENABLE
        # if ($branch -ne "preview") {
        #   Write-Host "The branch '$branch' is invalid. Preview releases can only run on 'preview' branches."
        #   exit 1;
        # }


  get_version:
    name: Get Version
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    runs-on: ubuntu-latest
    needs: validate_branch
    steps:
    - name: Get Version From Project File
      id: get-version
      uses: KinsonDigital/VersionMiner@v1.0.0-preview.4
      with:
        repo-owner: KinsonDigital
        repo-name: CASL
        repo-token: ${{ secrets.CICD_REST_API }}
        branch-name: '${{ github.ref_name }}'
        file-format: 'xml' # Not case sensitive
        file-path: '${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj'
        version-keys: Version


  validate_version:
    name: Validate Version
    runs-on: ubuntu-latest
    needs: get_version
    steps:
    - name: Set Up Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x

    - name: Validate Version
      run: |
        # Args: 1. Version 2. Version Type

        $version = "${{ env.CICD_SCRIPTS_VERSION }}";
        $scriptUrl = "https://raw.githubusercontent.com/KinsonDigital/Infrastructure/";
        $scriptUrl = "$scriptUrl$version/cicd/scripts/validate-version.ts";

        deno run `
          $scriptUrl `
          "${{ needs.get_version.outputs.version }}" `
          preview;


  validate_tag:
    name: Validate Tag
    runs-on: ubuntu-latest
    needs: get_version
    steps:
    - name: Set Up Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x

    - name: Validate Tag
      run: |
        # Args: 1. TagType  2. TagName 3. RepoName 4. Secret

        $version = "${{ env.CICD_SCRIPTS_VERSION }}";
        $scriptUrl = "https://raw.githubusercontent.com/KinsonDigital/Infrastructure/";
        $scriptUrl = "$scriptUrl$version/cicd/scripts/validate-tag.ts";

        # TODO: REENABLE
        # deno run `
        #   --allow-net `
        #   $scriptUrl `
        #   preview `
        #   "${{ needs.get_version.outputs.version }}" `
        #   CASL `
        #   ${{ secrets.CICD_REST_API }};


  nuget_pkg_does_not_exist:
    name: NuGet Package Does Not Exist
    runs-on: ubuntu-latest
    needs: get_version
    steps:
    - name: Set Up Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x

    - name: Package Does Not Exist
      run: |
        # Args: 1. PackageName  2. Version

        $version = "${{ env.CICD_SCRIPTS_VERSION }}";
        $scriptUrl = "https://raw.githubusercontent.com/KinsonDigital/Infrastructure/";
        $scriptUrl = "$scriptUrl$version/cicd/scripts/nuget-pkg-does-not-exist.ts";

        # TODO: REENABLE
        deno run `
          --allow-net `
          $scriptUrl `
          KinsonDigital.CASL `
          "${{ needs.get_version.outputs.version }}";

