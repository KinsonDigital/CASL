name: ðŸš€Production Release

env:
  PROJECT_NAME: CASL
  BUILD_CONFIG: Release
  RELEASE_NAME: Production
  NET_SDK_VERSION: 5.0.x # Changing this means changing ARTIFACT_FOLDER_NAME
  ARTIFACT_FOLDER_NAME: '5.0' # Changing this means changing NET_SDK_VERSION

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    paths-ignore:
      - ".github/**"
      - 'Documentation/**'
      - '.editorconfig'
      - '*.runsettings'
      - '.gitattributes'
      - '.gitignore'
      - '*.md'
      - '.vscode/**'

jobs:
  Validate_Version:
    name: Validate Version
    runs-on: windows-latest
    environment: production
    steps:
    - uses: actions/checkout@v2

    - name: Get Version From Project File
      id: prod-version
      uses: KinsonDigital/vget@v0.4.0
      with:
        repo-owner-and-name: '${{ github.repository }}'
        branch: '${{ github.ref }}'
        relative-file-path: '${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Validate Production Version
      uses: actions/github-script@v4
      with:
        script: |
          const script = require('./.github/workflows/status-check-scripts/prod-version-status-check.js');
          let version = '${{ steps.prod-version.outputs.version }}';
          let scriptResult = script({version});

          if (scriptResult.failed === true) {
            core.setFailed(scriptResult.error);
          } else {
            console.log(`The version 'v${version}' is valid!!`);
          }

  Library_Build_And_Test:
    name: Build & Test (Library)
    runs-on: windows-latest
    needs: Validate_Version
    environment: production
    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.NET_SDK_VERSION }}

    - name: Restore Dependencies
      run: dotnet restore "${{ github.workspace }}/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj"

    - name: Build
      run: dotnet build "${{ github.workspace }}/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj" -c ${{ env.BUILD_CONFIG }} --no-restore

    - name: Execute Unit Tests
      run: dotnet test "${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Tests/${{ env.PROJECT_NAME }}Tests.csproj" -c ${{ env.BUILD_CONFIG }} --collect:"XPlat Code Coverage" --no-restore

    - name: Publish Code Coverage Results
      uses: codecov/codecov-action@v1.5.2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Tests/TestResults/**/coverage.cobertura.xml

    - name: Publish Build Artifacts
      uses: actions/upload-artifact@v2.2.3
      with:
        name: ${{ env.PROJECT_NAME }} Build Artifacts
        path: ${{ github.workspace }}/${{ env.PROJECT_NAME }}/bin/${{ env.BUILD_CONFIG }}/net${{ env.ARTIFACT_FOLDER_NAME }}
        error: There was an issue uploading the build artifact

    - name: Setup Nuget
      uses: NuGet/setup-nuget@v1.0.5

    - name: Create Nuget Package
      run: dotnet pack "${{ github.workspace }}/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj" -o "${{ github.workspace }}" -c ${{ env.BUILD_CONFIG }}

    - name: Get Version From Project File
      id: prod-version
      uses: KinsonDigital/vget@v0.4.0
      with:
        repo-owner-and-name: '${{ github.repository }}'
        branch: '${{ github.ref }}'
        relative-file-path: '${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj'
        github-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish Nuget Package
      run: dotnet nuget push "${{ github.workspace }}/KinsonDigital.${{ env.PROJECT_NAME }}.${{ steps.prod-version.outputs.version }}.nupkg" --api-key ${{ secrets.NUGET_ORG_API_KEY }} --source https://api.nuget.org/v3/index.json

  Build_And_Release_Testing_App:
    name: Build & Release (Testing App)
    runs-on: windows-latest
    needs: Validate_Version
    environment: production
    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.NET_SDK_VERSION }}

    - name: Restore Dependencies
      run: dotnet restore "${{ github.workspace }}/Testing/${{ env.PROJECT_NAME }}Testing/${{ env.PROJECT_NAME }}Testing.csproj"

    - name: Get Version From Project File
      id: prod-version
      uses: KinsonDigital/vget@v0.4.0
      with:
        repo-owner-and-name: '${{ github.repository }}'
        branch: '${{ github.ref }}'
        relative-file-path: '${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Package Testing App
      run: |
        ${{ github.workspace }}/BuildScripts/PackageTestingApp.ps1 -Workspace "${{ github.workspace }}" `
          -ProjectName "${{ env.PROJECT_NAME }}" `
          -ReleaseName "${{ env.RELEASE_NAME }}" `
          -BuildConfig "${{ env.BUILD_CONFIG }}" `
          -Version "${{ steps.prod-version.outputs.version }}"

    - name: Release Testing Application
      uses: softprops/action-gh-release@v0.1.12
      with:
        tag_name: v${{ steps.prod-version.outputs.version }}
        body: |
          ${{ env.PROJECT_NAME }} - ${{ env.RELEASE_NAME }} Release [${{ steps.prod-version.outputs.version }}](https://github.com/KinsonDigital/${{ env.PROJECT_NAME }}/tree/${{ steps.prod-version.outputs.version }})
          Execute the testing application in the **_${{ env.PROJECT_NAME }}-TestingApp-${{ steps.prod-version.outputs.version }}.zip_** file to perform manual testing.
        files: ${{ github.workspace }}/${{ env.PROJECT_NAME }}-TestingApp-${{ steps.prod-version.outputs.version }}.zip
